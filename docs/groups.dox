/**
 * @defgroup WebAnalogy Web Development Analogy
 * @brief Understanding AeroDynControlRig through web development concepts
 *
 * This group maps the entire UI architecture to familiar web technologies.
 * If you know HTML, CSS, and JavaScript, you already understand this codebase.
 *
 * ## The Three Pillars
 *
 * | Web Technology | AeroDynControlRig Equivalent | Module |
 * |----------------|------------------------------|--------|
 * | **HTML** | ImGui widget calls + custom widgets | @ref UIWidgets |
 * | **CSS** | Style system (colors, spacing, rounding) | @ref UITheme |
 * | **JavaScript** | ImGui immediate mode + state updates | Panel `draw()` methods |
 *
 * ## Quick Reference
 *
 * ### Structure (HTML ↔ ImGui)
 * ```html
 * <div class="card">
 *   <h2>Title</h2>
 *   <p>Content</p>
 * </div>
 * ```
 * ```cpp
 * ui::BeginCard("id", options);
 *     ui::CardHeader("Title");
 *     ImGui::TextUnformatted("Content");
 * ui::EndCard();
 * ```
 *
 * ### Styling (CSS ↔ Palette)
 * ```css
 * :root {
 *   --accent-base: #1193d4;
 *   --text-muted: #98aeb9;
 * }
 * ```
 * ```cpp
 * const ui::Palette& palette = ui::Colors();
 * ImGui::PushStyleColor(ImGuiCol_Text, palette.text_muted);
 * ```
 *
 * ### Interactivity (JavaScript ↔ ImGui)
 * ```javascript
 * button.addEventListener('click', () => {
 *   state.paused = !state.paused;
 * });
 * ```
 * ```cpp
 * if (ImGui::Button("Pause")) {
 *     state.paused = !state.paused;
 * }
 * ```
 *
 * ## Essential Reading
 *
 * 1. **@ref web_analogy** - Complete web development mapping
 * 2. **@ref gpu_pipeline** - How everything gets rendered (RAM → GPU → Screen)
 * 3. **@ref UITheme** - Color palette and typography (CSS equivalent)
 * 4. **@ref UIWidgets** - Custom components (React/Bootstrap equivalent)
 *
 * @{
 * @}
 */

/**
 * @page ui_architecture UI Architecture Overview
 *
 * @section ui_arch_intro Introduction
 *
 * AeroDynControlRig's UI follows a **component-based architecture** similar to modern
 * web frameworks (React, Vue). The system has three layers:
 *
 * 1. **Theme Layer** (global styling) - @ref UITheme
 * 2. **Widget Layer** (reusable components) - @ref UIWidgets
 * 3. **Panel Layer** (application views) - Panel system
 *
 * @section ui_arch_data Data Flow
 *
 * ```
 * ┌─────────────────────────────────────────┐
 * │ SimulationState (central state)         │  ← Like Redux/Vuex store
 * └─────────────────────────────────────────┘
 *         ↑                    ↓
 *         │                    │
 *    Modules write        Panels read
 *         │                    │
 *         │                    ↓
 *         │          ┌──────────────────────┐
 *         │          │ Panel::draw()        │  ← Like React render()
 *         │          │  - Calculate data    │
 *         │          │  - Render widgets    │
 *         │          └──────────────────────┘
 *         │                    ↓
 *         │          ┌──────────────────────┐
 *         │          │ UI Widgets           │  ← BeginCard, ValueChip
 *         │          │  - Apply styles      │
 *         │          │  - Generate geometry │
 *         │          └──────────────────────┘
 *         │                    ↓
 *         │          ┌──────────────────────┐
 *         │          │ ImGui (immediate)    │  ← Handles input/layout
 *         │          │  - Process input     │
 *         │          │  - Build draw lists  │
 *         │          └──────────────────────┘
 *         │                    ↓
 *         │          ┌──────────────────────┐
 *         └──────────│ User clicks button   │  ← Updates state
 *                    │  state.paused = true │
 *                    └──────────────────────┘
 * ```
 *
 * @section ui_arch_styling Styling System
 *
 * The styling system uses **design tokens** (like CSS custom properties):
 *
 * ```cpp
 * // Design tokens (ui::Palette)
 * struct Palette {
 *     ImVec4 canvas_bg;    // #0c1014
 *     ImVec4 card_bg;      // #111618
 *     ImVec4 accent_base;  // #1193d4
 *     // ... etc
 * };
 *
 * // Global theme application
 * void ApplyTheme(ImGuiStyle& style) {
 *     style.WindowPadding = ImVec2(26, 22);  // Like CSS padding
 *     style.WindowRounding = 18.0f;          // Like CSS border-radius
 *     style.Colors[...] = palette.card_bg;   // Like CSS background-color
 * }
 * ```
 *
 * @section ui_arch_components Component System
 *
 * Custom widgets provide reusable UI elements:
 *
 * | Widget | Web Equivalent | Purpose |
 * |--------|---------------|---------|
 * | `ui::BeginCard/EndCard` | `<div class="card">` | Container with styling |
 * | `ui::CardHeader` | `<h2>` with badge | Section title |
 * | `ui::ValueChip` | `<span class="badge">` | Label-value pair |
 *
 * @section ui_arch_panels Panel System
 *
 * Panels are like React components - they read from state and render UI:
 *
 * ```cpp
 * class RotorPanel : public Panel {
 *     void draw(SimulationState& state, Camera& camera) override {
 *         // 1. Calculate derived data (like React render)
 *         float avg_rpm = calculateAverage(state.rotor.rpm);
 *
 *         // 2. Render UI (declarative)
 *         ui::BeginCard(name(), options);
 *             ui::CardHeader("Rotor Dynamics", badge, &color);
 *             ImGui::Text("%.0f RPM", avg_rpm);
 *             ui::ValueChip("Thrust", thrust_str, config);
 *         ui::EndCard();
 *     }
 * };
 * ```
 *
 * @section ui_arch_layout Layout System
 *
 * **Dockspace** provides a grid-like layout (similar to CSS Grid):
 *
 * ```
 * ┌─────────────────────────┬───────────────────┐
 * │                         │   Rotor Panel     │
 * │   Flight Scene          │                   │
 * │   (large viewport)      ├───────────────────┤
 * │                         │   Power Panel     │
 * ├──────────┬──────────────┼───────────────────┤
 * │Estimator │ Control      │   Sensor Panel    │
 * │Panel     │ Panel        │                   │
 * ├──────────┼──────────────┴───────────────────┘
 * │ Dynamics │ Telemetry Panel
 * │ Panel    │
 * └──────────┴────────────────
 * ```
 *
 * Created via dockspace splits in `Application::renderDashboardLayout()`
 *
 * @see @ref web_analogy for detailed web mapping
 * @see @ref gpu_pipeline for rendering details
 */
